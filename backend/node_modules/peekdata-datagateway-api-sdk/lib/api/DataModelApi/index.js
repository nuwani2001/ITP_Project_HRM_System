"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var base_1 = require("../base");
var DataModelApi = /** @class */ (function (_super) {
    __extends(DataModelApi, _super);
    function DataModelApi() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Gets list of scope names
         */
        _this.getScopeNames = function (requestOptions) {
            return _this.get({
                path: '/datamodel/getscopenames',
                requestOptions: requestOptions,
            });
        };
        /**
         * Gets list of data model names
         */
        _this.getDataModelNames = function (scopeName, requestOptions) {
            return _this.get({
                path: '/datamodel/getdatamodelnames',
                params: [
                    { key: 'scopeName', value: scopeName },
                ],
                requestOptions: requestOptions,
            });
        };
        /**
         * Gets list of cube names
         */
        _this.getCubeNames = function (scopeName, dataModelName, requestOptions) {
            return _this.get({
                path: '/datamodel/getcubes',
                params: [
                    { key: 'scopeName', value: scopeName },
                    { key: 'dataModelName', value: dataModelName },
                ],
                requestOptions: requestOptions,
            });
        };
        /**
         * Gets list of data model's dimensions
         * @param securityRole used to filter dimensions
         */
        _this.getDimensions = function (scopeName, dataModelName, securityRole, requestOptions) {
            var params = [
                { key: 'scopeName', value: scopeName },
                { key: 'dataModelName', value: dataModelName },
            ];
            if (securityRole) {
                params.push({ key: 'securityRole', value: securityRole });
            }
            return _this.get({
                path: '/datamodel/getdimensions',
                params: params,
                requestOptions: requestOptions,
            });
        };
        /**
         * Gets list of data model's metrics
         * @param securityRole used to filter metrics
         */
        _this.getMetrics = function (scopeName, dataModelName, securityRole, requestOptions) {
            var params = [
                { key: 'scopeName', value: scopeName },
                { key: 'dataModelName', value: dataModelName },
            ];
            if (securityRole) {
                params.push({ key: 'securityRole', value: securityRole });
            }
            return _this.get({
                path: '/datamodel/getmetrics',
                params: params,
                requestOptions: requestOptions,
            });
        };
        /**
         * As Data API should receive valid combinations of dimensions and metrics, request should be validated first.
         * If combination is not valid, field "isValid" will return false with detailed description contained in "reason".
         */
        _this.validate = function (request, requestOptions) {
            return _this.post({
                path: '/datamodel/validate',
                body: request,
                requestOptions: requestOptions,
            });
        };
        /**
         * Gets valid dimensions and metrics
         */
        _this.getCompatibleNodes = function (request, requestOptions) {
            return _this.post({
                path: '/datamodel/getcompatible',
                body: request,
                requestOptions: requestOptions,
            });
        };
        return _this;
    }
    return DataModelApi;
}(base_1.BaseApi));
exports.DataModelApi = DataModelApi;
