"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../constants");
var PeekdataError_1 = require("./PeekdataError");
// #region -------------- Class -------------------------------------------------------------------
var BaseApi = /** @class */ (function () {
    function BaseApi(options) {
        var _this = this;
        // #region -------------- Setters -------------------------------------------------------------------
        this.setTimeout = function (timeout) {
            _this.timeout = timeout;
        };
        this.setBaseUrl = function (baseUrl) {
            _this.baseUrl = baseUrl;
        };
        this.setHeaders = function (headers) {
            _this.headers = headers;
        };
        // #endregion
        // #region -------------- Request -------------------------------------------------------------------
        this.post = function (options) {
            return _this.call(options, 'POST');
        };
        this.get = function (options) {
            return _this.call(options, 'GET');
        };
        this.call = function (options, action) {
            var path = options.path, params = options.params, body = options.body, requestOptions = options.requestOptions;
            var timeout = requestOptions && requestOptions.timeout || _this.timeout;
            var baseUrl = requestOptions && requestOptions.baseUrl || _this.baseUrl;
            var headers = {};
            if (requestOptions && requestOptions.headers) {
                headers = __assign({}, headers, requestOptions.headers);
            }
            if (_this.headers) {
                headers = __assign({}, headers, _this.headers);
            }
            var promise = callApi(_this.getCallUrl(baseUrl, path, params), action, body, headers);
            return timeOut(timeout, promise);
        };
        this.getCallUrl = function (baseUrl, path, params) {
            var parametersValue = generateParametersValue(params);
            var url = "" + baseUrl + path + parametersValue;
            return url;
        };
        var baseUrl = options.baseUrl, timeout = options.timeout, headers = options.headers;
        this.timeout = timeout ? timeout : constants_1.defaultTimeout;
        this.baseUrl = baseUrl;
        this.headers = headers;
    }
    return BaseApi;
}());
exports.BaseApi = BaseApi;
// #endregion
// #region -------------- Helper functions -------------------------------------------------------------------
function generateParametersValue(parameters) {
    var value = '';
    if (parameters && parameters.length > 0 && parameters[0]) {
        value += "?" + parameters[0].key + "=" + parameters[0].value;
        for (var i = 1; i < parameters.length; i += 1) {
            value += "&" + parameters[i].key + "=" + parameters[i].value;
        }
    }
    return value;
}
function callApi(url, method, body, headers) {
    if (method === void 0) { method = 'GET'; }
    if (body === void 0) { body = {}; }
    var fetchParams = {
        cache: 'no-cache',
        headers: __assign({ 'content-type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' }, headers),
        method: method,
        mode: 'cors',
        redirect: 'follow',
        referrer: 'no-referrer',
        body: method !== 'GET' && body && Object.keys(body).length ? JSON.stringify(body) : null,
    };
    return fetch(url, fetchParams)
        .then(function (response) {
        var contentType = response.headers.get('content-type');
        var isJSON = !!(contentType && contentType.indexOf('application/json') !== -1);
        // All is ok?
        if (response.ok) {
            if (response.status === 204 || response.status === 205) {
                return Promise.resolve(null);
            }
            // JSON OK response
            if (isJSON) {
                return response.json();
            }
            return response.text();
        }
        // Error occured
        if (isJSON) {
            return response.json()
                .then(function (error) {
                throw new PeekdataError_1.PeekdataError(error.message, error.errorCode, response);
            });
        }
        return response.text()
            .then(function (error) {
            throw new PeekdataError_1.PeekdataError(error, null, response);
        });
    })
        .catch(function (error) {
        throw error;
    });
}
function timeOut(milliseconds, promise) {
    return new Promise(function (resolve, reject) {
        setTimeout(function () {
            reject(new Error('Request timed out'));
        }, milliseconds);
        promise.then(resolve, reject);
    });
}
// #endregion
