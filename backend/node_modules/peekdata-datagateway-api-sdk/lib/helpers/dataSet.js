"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var report_1 = require("../models/report");
var DataSet = /** @class */ (function () {
    function DataSet(response) {
        this.response = response;
        var columnHeaders = this.response && this.response.columnHeaders;
        this.dimensionIndexes = this.getColumnsIndexes(columnHeaders, report_1.ReportColumnType.dimension);
        this.metricIndexes = this.getColumnsIndexes(columnHeaders, report_1.ReportColumnType.metric);
    }
    // #region -------------- Public methods -------------------------------------------------------------------
    /**
     * Returns raw data response
     */
    DataSet.prototype.getRawResponse = function () {
        return this.response;
    };
    /**
     * Returns dimensions values
     */
    DataSet.prototype.getDimensionsValues = function () {
        if (!this.response || !this.dimensionIndexes || this.dimensionIndexes.length < 1) {
            return null;
        }
        var rows = this.response.rows;
        var dimensions = [];
        if (!rows || rows.length < 1) {
            return null;
        }
        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
            var row = rows_1[_i];
            var dimensionValues = [];
            var optimizedRow = this.getOptimizedDataRow(row);
            for (var _a = 0, _b = this.dimensionIndexes; _a < _b.length; _a++) {
                var index = _b[_a];
                dimensionValues.push(optimizedRow[index]);
            }
            dimensions.push(dimensionValues);
        }
        return dimensions;
    };
    /**
     * Returns all values mapped by metrics
     */
    DataSet.prototype.getMetricsValues = function () {
        if (!this.response || !this.metricIndexes || this.metricIndexes.length < 1) {
            return null;
        }
        var _a = this.response, columnHeaders = _a.columnHeaders, rows = _a.rows;
        var dataSet = [];
        if (!rows || rows.length < 1) {
            return null;
        }
        for (var _i = 0, _b = this.metricIndexes; _i < _b.length; _i++) {
            var index = _b[_i];
            var dataset = [];
            for (var _c = 0, rows_2 = rows; _c < rows_2.length; _c++) {
                var row = rows_2[_c];
                var optimizedRow = this.getOptimizedDataRow(row);
                dataset.push({
                    dimensions: this.getRowDimensionsValues(optimizedRow),
                    value: optimizedRow[index],
                });
            }
            dataSet.push({
                metric: columnHeaders[index],
                values: dataset,
            });
        }
        return dataSet;
    };
    /**
     * Returns all values
     */
    DataSet.prototype.getValues = function () {
        if (!this.response || !this.metricIndexes || this.metricIndexes.length < 1) {
            return null;
        }
        var _a = this.response, columnHeaders = _a.columnHeaders, rows = _a.rows;
        var values = [];
        if (!rows || rows.length < 1) {
            return null;
        }
        for (var _i = 0, _b = this.metricIndexes; _i < _b.length; _i++) {
            var index = _b[_i];
            for (var _c = 0, rows_3 = rows; _c < rows_3.length; _c++) {
                var row = rows_3[_c];
                var optimizedRow = this.getOptimizedDataRow(row);
                values.push({
                    metric: columnHeaders[index],
                    dimensions: this.getRowDimensionsValues(optimizedRow),
                    value: optimizedRow[index],
                });
            }
        }
        return values;
    };
    // #endregion
    // #region -------------- Private methods -------------------------------------------------------------------
    DataSet.prototype.getColumnsIndexes = function (columnHeaders, columnType) {
        var indexes = [];
        if (!columnHeaders || columnHeaders.length < 1 || !columnType) {
            return indexes;
        }
        columnHeaders.forEach(function (columnHeader, index) {
            var headerColumnType = columnHeader && columnHeader.columnType;
            if (headerColumnType === columnType) {
                indexes.push(index);
            }
        });
        return indexes;
    };
    DataSet.prototype.getRowDimensionsValues = function (row) {
        return this.dimensionIndexes && this.dimensionIndexes.map(function (index) {
            return row[index];
        });
    };
    DataSet.prototype.getOptimizedDataRow = function (row) {
        if (!row) {
            return null;
        }
        if (this.isOptimizedDataRow(row)) {
            return row;
        }
        var optimizedRow = [];
        var columnHeaders = this.response.columnHeaders;
        if (!columnHeaders) {
            return null;
        }
        columnHeaders.forEach(function (header) {
            optimizedRow.push(row[header.name]);
        });
        return optimizedRow;
    };
    DataSet.prototype.isOptimizedDataRow = function (row) {
        return Array.isArray(row);
    };
    return DataSet;
}());
exports.DataSet = DataSet;
