import React from "react";
import { IFilter } from "../../../models/filter";
import { IDimension } from "../../../models/node";
import { ITranslations } from "../../../models/translations";
import { IChangeFilterInput, ISelectFilter } from "../../../state/actions";
import "../../../../style/components/filterControl.scss";
interface IProps {
    filter: IFilter;
    dimensions: IDimension[];
    t: ITranslations;
    onFilterOptionSelected: (payload: ISelectFilter) => void;
    onFilterInputChanged: (payload: IChangeFilterInput) => void;
    onFilterRemoveClicked: (filter: IFilter) => void;
    onGenerateReportRequest: () => void;
}
export declare class FilterControl extends React.PureComponent<IProps> {
    componentDidUpdate(prevProps: IProps): void;
    render(): JSX.Element;
    private getFilterTypeOptions;
    private onTypeSelected;
    private renderRemoveFilterButton;
    private onFilterRemoveClicked;
    private renderOperationsFilter;
    private getSingleKeyOperationOptions;
    private getOperationOptions;
    private onOperationSelected;
    private renderKeyFilter;
    private onKeySelected;
    private renderSingleKeysInput;
    private renderSingleValuesInput;
    private renderDateRangesFilter;
    private onDateSelected;
    private onFilterInputChanged;
    private onFilterInputSingleKeyNullChanged;
    private generateReportRequestIfNeeded;
}
export {};
