import React from 'react';
import { IFilter } from "../../models/filter";
import { IDimension } from "../../models/node";
import { ITranslations } from "../../models/translations";
import { IChangeFilterInput, ISelectFilter } from "../../state/actions";
interface IStateProps {
    filters: IFilter[];
    dimensions: IDimension[];
    t: ITranslations;
}
interface IDispatchProps {
    onFilterAddClicked: () => void;
    onFilterOptionSelected: (payload: ISelectFilter) => void;
    onFilterInputChanged: (payload: IChangeFilterInput) => void;
    onFilterRemoveClicked: (payload: IFilter) => void;
    onGenerateReportRequest: () => void;
}
interface IOwnProps {
}
interface IProps extends IStateProps, IDispatchProps, IOwnProps {
}
declare class FilterControls extends React.PureComponent<IProps> {
    render(): JSX.Element;
}
declare const connected: import("react-redux").ConnectedComponent<typeof FilterControls, Pick<IProps, never> & IOwnProps>;
export { connected as FilterControls };
