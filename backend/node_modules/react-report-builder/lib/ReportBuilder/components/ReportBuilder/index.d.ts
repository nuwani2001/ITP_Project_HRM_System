import { INotOptimizedReportResponse, IOptimizedReportResponse, IReportRequest, PeekdataApi, ReportColumnType } from "peekdata-datagateway-api-sdk";
import React, { ReactNode } from "react";
import { IDimension, IMetric, ISelectedNode } from "../../models/node";
import { ITranslations } from "../../models/translations";
import { IAsyncState } from "../../state/action";
import { ILoadNodesPayloadRequest, ISelectNodePayload, ISortNodePayload, ISortOrderNodePayload } from "../../state/actions";
import { ICompatibilityState } from "../../state/reducers/compatibility";
import { IReportOptionsState } from "../../state/reducers/reportOptions";
import { IRgb } from "../../utils/Color";
interface IStateProps {
    dimensions: IAsyncState<IDimension[]>;
    metrics: IAsyncState<IMetric[]>;
    selectedDimensions: ISelectedNode[];
    selectedMetrics: ISelectedNode[];
    compatibility: ICompatibilityState;
    limitRowsTo: number;
    startWithRow: number;
    request: IReportRequest;
    scopeNames: IAsyncState<string[]>;
    selectedScope: string;
    dataModelNames: IAsyncState<string[]>;
    selectedDataModel: string;
    t: ITranslations;
    reportOptions: IReportOptionsState;
    dataFull: IAsyncState<INotOptimizedReportResponse>;
    dataOptimized: IAsyncState<IOptimizedReportResponse>;
    file: IAsyncState<string>;
    select: IAsyncState<string>;
}
interface IDispatchProps {
    onOptionAdded: (payload: ReportColumnType) => void;
    onOptionSelected: (payload: ISelectNodePayload) => void;
    onOptionUnselected: (payload: ISelectNodePayload) => void;
    onSortOrder: (payload: ISortOrderNodePayload) => void;
    onSortEnd: (payload: ISortNodePayload) => void;
    onChangeLimitRowsTo: (payload: number) => void;
    onChangeStartWithRow: (payload: number) => void;
    onScopeChanged: (scope: string) => void;
    onDataModelChanged: (payload: ILoadNodesPayloadRequest) => void;
    onLoadReportRequest: (request: Partial<IReportRequest>) => void;
    onGenerateReportRequest: () => void;
    setTranslations: (translations: Partial<ITranslations>) => void;
    onReportOptionsChange: () => void;
}
interface IDefaultProps {
    loader: ReactNode;
    showScopesDropdown: boolean;
    showDataModelDropdown: boolean;
    showDimensionsList: boolean;
    showMetricsList: boolean;
    showFilters: boolean;
    showRowsOffset: boolean;
    showRowsLimit: boolean;
    defaultRowsOffset: number;
    defaultRowsLimit: number;
    maxRowsLimit: number;
    showRequestViewButton: boolean;
    showResponseViewButton: boolean;
    showDataTabs: boolean;
    showChart: boolean;
    showDataTable: boolean;
    defaultTab: number;
    chartColors?: IRgb[];
}
export interface IReportBuilderProps extends Partial<IDefaultProps> {
    peekdataApi: PeekdataApi;
    translations?: Partial<ITranslations>;
    reportRequest?: Partial<IReportRequest>;
}
interface IProps extends IStateProps, IDispatchProps, IReportBuilderProps {
}
declare class ReportBuilder extends React.PureComponent<IProps> {
    static defaultProps: IDefaultProps;
    constructor(props: IProps);
    componentDidMount(): void;
    componentDidUpdate(prevProps: IProps): void;
    render(): JSX.Element;
    private renderDataModelDropDowns;
    private renderLoader;
    private isLoading;
    private renderError;
    private getErrors;
    private renderReportBuilderContent;
    private renderDimensionsList;
    private renderMetricsList;
    private onSortOrder;
    private renderFilters;
    private renderRowsLimit;
    private onChangeStartWithRow;
    private onChangeLimitRowsTo;
    private renderViewDropDowns;
    private showRequestResults;
    private renderTabs;
}
declare const connected: import("react-redux").ConnectedComponent<typeof ReportBuilder, Pick<IProps, "translations" | "loader" | "showScopesDropdown" | "showDataModelDropdown" | "showDimensionsList" | "showMetricsList" | "showFilters" | "showRowsOffset" | "showRowsLimit" | "defaultRowsOffset" | "defaultRowsLimit" | "maxRowsLimit" | "showRequestViewButton" | "showResponseViewButton" | "showDataTabs" | "showChart" | "showDataTable" | "defaultTab" | "chartColors" | "peekdataApi" | "reportRequest"> & IReportBuilderProps>;
export { connected as ReportBuilder };
