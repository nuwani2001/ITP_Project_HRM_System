import { INotOptimizedReportResponse, IOptimizedReportResponse, IReportRequest } from 'peekdata-datagateway-api-sdk';
import React from 'react';
import { ITranslations } from "../../../models/translations";
import { IAsyncState } from "../../../state/action";
interface IStateProps {
    dataFull: IAsyncState<INotOptimizedReportResponse>;
    dataOptimized: IAsyncState<IOptimizedReportResponse>;
    file: IAsyncState<string>;
    select: IAsyncState<string>;
    request: IReportRequest;
    t: ITranslations;
}
interface IDispatchProps {
    onLoadDataFull: (request: IReportRequest) => void;
    onLoadDataOptimized: (request: IReportRequest) => void;
    onLoadCsvFile: (request: IReportRequest) => void;
    onLoadSelect: (request: IReportRequest) => void;
}
interface IOwnProps {
}
interface IProps extends IStateProps, IDispatchProps, IOwnProps {
}
interface IState {
    isOpen: boolean;
    selected: string;
}
declare class ViewResponse extends React.PureComponent<IProps, IState> {
    constructor(props: IProps);
    componentDidMount(): void;
    componentDidUpdate(prevProps: IProps, prevState: IState): void;
    render(): JSX.Element;
    private getOptions;
    private onSelect;
    private renderViewResponseModal;
    private onOpenModal;
    private onCloseModal;
}
declare const connected: import("react-redux").ConnectedComponent<typeof ViewResponse, Pick<IProps, never> & IOwnProps>;
export { connected as ViewResponse };
