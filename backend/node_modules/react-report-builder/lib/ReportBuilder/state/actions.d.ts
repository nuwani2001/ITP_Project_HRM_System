import { ICompatibilityResponse, INode, INotOptimizedReportResponse, IOptimizedReportResponse, IReportFilters, IReportRequest, ReportColumnType } from 'peekdata-datagateway-api-sdk';
import { FilterOptionTypes, IFilter } from "../models/filter";
import { ISelectedNode } from "../models/node";
import { IAction, IAsyncState } from "./action";
import { ITranslations } from '../models/translations';
export declare const actionTypes: {
    loadScopeNames: string;
    scopeNamesLoaded: string;
    loadDataModelNames: string;
    dataModelNamesLoaded: string;
    loadDataModelNodes: string;
    dimensionsLoaded: string;
    setSelectedDimensions: string;
    metricsLoaded: string;
    setSelectedMetrics: string;
    addOption: string;
    selectOption: string;
    unselectOption: string;
    compatibilityChecked: string;
    sortOrder: string;
    sortEnd: string;
    addFilter: string;
    filtersLoaded: string;
    removeFilter: string;
    setFilters: string;
    selectFilterOption: string;
    changeFilterInput: string;
    changeLimitRowsTo: string;
    changeStartWithRow: string;
    loadReportRequest: string;
    generateReportRequest: string;
    reportRequestGenerated: string;
    loadSelect: string;
    selectLoaded: string;
    loadDataOptimized: string;
    dataOptimizedLoaded: string;
    loadDataFull: string;
    dataFullLoaded: string;
    loadCsvFile: string;
    csvFileLoaded: string;
    setTranslations: string;
    expandReportOptions: string;
};
export declare function loadScopeNames(payload?: boolean): IAction;
export declare function scopeNamesLoaded(payload: IAsyncState<string[]>): IAction;
export declare function loadDataModelNames(payload: string): IAction;
export declare function dataModelNamesLoaded(payload: IAsyncState<string[]>): IAction;
export interface ILoadNodesPayloadRequest {
    selectedDataModel: string;
    selectedDimensions?: ISelectedNode[];
    selectedMetrics?: ISelectedNode[];
}
export interface ISelectNodePayload {
    value: string;
    optionType: ReportColumnType;
}
export interface ISortOrderNodePayload {
    selectedOption: ISelectedNode;
    optionType: ReportColumnType;
}
export interface ISortNodePayload {
    oldIndex: number;
    newIndex: number;
    optionType: ReportColumnType;
}
export declare function loadDataModelNodes(payload: ILoadNodesPayloadRequest): IAction;
export declare function dimensionsLoaded(payload: IAsyncState<INode[]>): IAction;
export declare function addDataModel(payload: ReportColumnType): IAction;
export declare function selectDataModel(payload: ISelectNodePayload): IAction;
export declare function unselectDataModel(payload: ISelectNodePayload): IAction;
export declare function compatibilityChecked(payload: IAsyncState<ICompatibilityResponse>): IAction;
export declare function sortOrder(payload: ISortOrderNodePayload): IAction;
export declare function sortEnd(payload: ISortNodePayload): IAction;
export declare function setSelectedDimensions(payload: ISelectedNode[]): IAction;
export declare function metricsLoaded(payload: IAsyncState<INode[]>): IAction;
export declare function setSelectedMetrics(payload: ISelectedNode[]): IAction;
export interface ISelectFilter {
    filter: IFilter;
    selectedItem: string | string[];
    optionType: FilterOptionTypes;
}
export interface IChangeFilterInput {
    filter: IFilter;
    name: string;
    value: string;
}
export declare function addFilter(): IAction;
export declare function filtersLoaded(payload: IReportFilters): IAction;
export declare function selectFilterOption(payload: ISelectFilter): IAction;
export declare function changeFilterInput(payload: IChangeFilterInput): IAction;
export declare function removeFilter(payload: IFilter): IAction;
export declare function setFilters(payload: IFilter[]): IAction;
export declare function changeLimitRowsTo(payload: number): IAction;
export declare function changeStartWithRow(payload: number): IAction;
export declare function loadReportRequest(payload: Partial<IReportRequest>): IAction;
export declare function generateReportRequest(): IAction;
export declare function reportRequestGenerated(payload: Partial<IReportRequest>): IAction;
export declare function loadSelect(payload: IReportRequest): IAction;
export declare function selectLoaded(payload: IAsyncState<string>): IAction;
export declare function loadDataOptimized(payload: IReportRequest): IAction;
export declare function dataOptimizedLoaded(payload: IAsyncState<IOptimizedReportResponse>): IAction;
export declare function loadDataFull(payload: IReportRequest): IAction;
export declare function dataFullLoaded(payload: IAsyncState<INotOptimizedReportResponse>): IAction;
export declare function loadCsvFile(payload: IReportRequest): IAction;
export declare function csvFileLoaded(payload: IAsyncState<string>): IAction;
export declare function setTranslations(payload: Partial<ITranslations>): {
    type: string;
    payload: Partial<ITranslations>;
};
export declare function expandReportOptions(): {
    type: string;
};
